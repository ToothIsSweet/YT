name: YT Build
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 1"  # Runs every Monday at 00:00 UTC

jobs:
  run:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "22"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Getting Tools
        run: |
          sudo apt install wget curl jq

          # Fetch latest CLI & Patches version numbers
          CLI_VERSION=$(curl -s https://api.github.com/repos/ReVanced/revanced-cli/releases/latest | jq -r '.tag_name' | grep -oE '[0-9]+(\.[0-9]+)*')
          PATCHES_VERSION=$(curl -s https://api.github.com/repos/ReVanced/revanced-patches/releases/latest | jq -r '.tag_name' | grep -oE '[0-9]+(\.[0-9]+)*')

          # Construct filenames
          CLI_NAME="revanced-cli-${CLI_VERSION}-all.jar"
          PATCHES_NAME="patches-${PATCHES_VERSION}.rvp"

          # Download latest revanced-cli JAR
          CLI_URL="https://github.com/ReVanced/revanced-cli/releases/download/v${CLI_VERSION}/revanced-cli-${CLI_VERSION}-all.jar"
          wget -O "$CLI_NAME" "$CLI_URL"

          # Verify JAR Download
          if [ ! -s "$CLI_NAME" ]; then
            echo "Error: Failed to download revanced-cli JAR!"
            exit 1
          fi

          # Download latest revanced-patches rvp file
          PATCHES_URL="https://github.com/ReVanced/revanced-patches/releases/download/v${PATCHES_VERSION}/patches-${PATCHES_VERSION}.rvp"
          wget -O "$PATCHES_NAME" "$PATCHES_URL"

          # Verify Patches File
          if [ ! -s "$PATCHES_NAME" ]; then
            echo "Error: Failed to download revanced-patches file!"
            exit 1
          fi

          # Download latest apkmd (v2.0.8)
          wget -O apkmd https://github.com/tanishqmanuja/apkmirror-downloader/releases/download/v2.0.8/apkmd
          chmod 777 apkmd

      - name: Fetch Latest Supported Versions
        run: |
          PATCHES_JSON=$(curl -s "https://api.revanced.app/v4/patches/list")

          # Extract latest compatible YouTube version
          YT_VERSION=$(echo "$PATCHES_JSON" | jq -r '[.[] | select(.compatiblePackages."com.google.android.youtube") | .compatiblePackages."com.google.android.youtube"[]] | max')

          # Extract latest compatible YouTube Music version (handle null case)
          YTM_VERSION=$(echo "$PATCHES_JSON" | jq -r '[.[] | select(.compatiblePackages."com.google.android.apps.youtube.music") | .compatiblePackages."com.google.android.apps.youtube.music"[]] | max')

          if [[ "$YTM_VERSION" == "null" ]]; then
            echo "No compatible YT Music version found in Revanced API. Fetching latest from APKMirror..."
            
            # Run apkmd to get latest YouTube Music version
            ./apkmd -j -s "YouTube Music" > apkmd_output.json
            YTM_VERSION=$(jq -r '.apps[0].version' apkmd_output.json)
          fi

          echo "Latest supported YouTube version: $YT_VERSION"
          echo "Latest supported YouTube Music version: $YTM_VERSION"

          # Generate dynamic apps.json
          cat <<EOF > apps.json
          {
            "options": {
              "arch": "arm64-v8a"
            },
            "apps": [
              {
                "name": "yt",
                "org": "google-inc",
                "repo": "youtube",
                "version": "$YT_VERSION"
              },
              {
                "name": "ytm",
                "org": "google-inc",
                "repo": "youtube-music",
                "version": "$YTM_VERSION"
              }
            ]
          }
          EOF

      - name: Download YouTube APKs
        run: |
          ./apkmd apps.json

      - name: Start building YT
        run: |
          echo "Using CLI: $CLI_NAME"
          ls -lah  # List files to debug

          if [ ! -f "$CLI_NAME" ]; then
            echo "Error: CLI JAR file not found!"
            exit 1
          fi

          java -jar "$CLI_NAME" \
            patch -p "$PATCHES_NAME" \
            -d "Announcements" \
            -d "Downloads" \
            ./downloads/yt.apk

          mv yt-patched.apk yt-sw.apk

      - name: Start building YTM
        run: |
          java -jar "$CLI_NAME" \
            patch -p "$PATCHES_NAME" \
            ./downloads/ytm.apk

          mv ytm-patched.apk ytm-sw.apk

      - name: Upload APK to release
        env:
          DATE: $(date +"%Y-%m-%d")
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./yt-sw.apk
          release_name: "YT Automatic Build (Date: $DATE)"
          file_glob: true
          overwrite: true
